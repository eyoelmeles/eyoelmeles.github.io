<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maths on Eyoel Meles</title><link>https://eyoelmeles.github.io/math/</link><description>Recent content in Maths on Eyoel Meles</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 06 Oct 2024 13:44:49 +0800</lastBuildDate><atom:link href="https://eyoelmeles.github.io/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Matrix multiplication algorithms on_RISC-V vector extensions</title><link>https://eyoelmeles.github.io/math/matrix_multiplication_algorithms_on_rvv/</link><pubDate>Sun, 06 Oct 2024 13:44:49 +0800</pubDate><guid>https://eyoelmeles.github.io/math/matrix_multiplication_algorithms_on_rvv/</guid><description>&lt;p>we start off with simple matrices, with both Length and complexity.&lt;/p>
&lt;p>first we use 4x4 matrix to display how RVV works. To do so, we write the algorithm in C first then talk about the instructions while we are writing the assembly code.&lt;/p>
&lt;p>For the proggrams bellow assume we are using &lt;code>VLEN&lt;/code> as 128bit&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style=";-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bc7a00">#include&lt;/span> &lt;span style="color:#bc7a00">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#bc7a00">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bc7a00">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bc7a00">#define N 3 &lt;/span>&lt;span style="color:#408080;font-style:italic">// Dimension of the matrix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#408080;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#b00040">int&lt;/span> &lt;span style="color:#00f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b00040">int&lt;/span> A[N][N] &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">2&lt;/span>, &lt;span style="color:#666">3&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">8&lt;/span>, &lt;span style="color:#666">9&lt;/span>, &lt;span style="color:#666">10&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">15&lt;/span>, &lt;span style="color:#666">16&lt;/span>, &lt;span style="color:#666">21&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b00040">int&lt;/span> B[N][N] &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">21&lt;/span>, &lt;span style="color:#666">20&lt;/span>, &lt;span style="color:#666">19&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">14&lt;/span>, &lt;span style="color:#666">13&lt;/span>, &lt;span style="color:#666">12&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#666">7&lt;/span>, &lt;span style="color:#666">6&lt;/span>, &lt;span style="color:#666">5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b00040">int&lt;/span> C[N][N];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">for&lt;/span>(&lt;span style="color:#b00040">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> N; &lt;span style="color:#666">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">for&lt;/span>(&lt;span style="color:#b00040">int&lt;/span> k &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>; k &lt;span style="color:#666">&amp;lt;&lt;/span> N; &lt;span style="color:#666">++&lt;/span>k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">for&lt;/span>(&lt;span style="color:#b00040">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>; j &lt;span style="color:#666">&amp;lt;&lt;/span> N; &lt;span style="color:#666">++&lt;/span>j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> C[i][j] &lt;span style="color:#666">+=&lt;/span> A[i][k] &lt;span style="color:#666">*&lt;/span> B[k][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">printf&lt;/span>(&lt;span style="color:#ba2121">&amp;#34;Resultant Matrix C:&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#ba2121">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">for&lt;/span> (&lt;span style="color:#b00040">int&lt;/span> i &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>; i &lt;span style="color:#666">&amp;lt;&lt;/span> N; i&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">for&lt;/span> (&lt;span style="color:#b00040">int&lt;/span> j &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0&lt;/span>; j &lt;span style="color:#666">&amp;lt;&lt;/span> N; j&lt;span style="color:#666">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">printf&lt;/span>(&lt;span style="color:#ba2121">&amp;#34;%d &amp;#34;&lt;/span>, C[i][j]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">printf&lt;/span>(&lt;span style="color:#ba2121">&amp;#34;&lt;/span>&lt;span style="color:#b62;font-weight:bold">\n&lt;/span>&lt;span style="color:#ba2121">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">return&lt;/span> &lt;span style="color:#666">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>